#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CheckersDB")]
public partial class CheckersDBDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertTblFamily(TblFamily instance);
  partial void UpdateTblFamily(TblFamily instance);
  partial void DeleteTblFamily(TblFamily instance);
  partial void InsertTblPlayerGame(TblPlayerGame instance);
  partial void UpdateTblPlayerGame(TblPlayerGame instance);
  partial void DeleteTblPlayerGame(TblPlayerGame instance);
  partial void InsertTblFamilyPlayer(TblFamilyPlayer instance);
  partial void UpdateTblFamilyPlayer(TblFamilyPlayer instance);
  partial void DeleteTblFamilyPlayer(TblFamilyPlayer instance);
  partial void InsertTblGame(TblGame instance);
  partial void UpdateTblGame(TblGame instance);
  partial void DeleteTblGame(TblGame instance);
  partial void InsertTblGameMove(TblGameMove instance);
  partial void UpdateTblGameMove(TblGameMove instance);
  partial void DeleteTblGameMove(TblGameMove instance);
  partial void InsertTblMove(TblMove instance);
  partial void UpdateTblMove(TblMove instance);
  partial void DeleteTblMove(TblMove instance);
  partial void InsertTblPlayer(TblPlayer instance);
  partial void UpdateTblPlayer(TblPlayer instance);
  partial void DeleteTblPlayer(TblPlayer instance);
  #endregion
	
	public CheckersDBDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CheckersDBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public CheckersDBDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public CheckersDBDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public CheckersDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public CheckersDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<TblFamily> TblFamilies
	{
		get
		{
			return this.GetTable<TblFamily>();
		}
	}
	
	public System.Data.Linq.Table<TblPlayerGame> TblPlayerGames
	{
		get
		{
			return this.GetTable<TblPlayerGame>();
		}
	}
	
	public System.Data.Linq.Table<TblFamilyPlayer> TblFamilyPlayers
	{
		get
		{
			return this.GetTable<TblFamilyPlayer>();
		}
	}
	
	public System.Data.Linq.Table<TblGame> TblGames
	{
		get
		{
			return this.GetTable<TblGame>();
		}
	}
	
	public System.Data.Linq.Table<TblGameMove> TblGameMoves
	{
		get
		{
			return this.GetTable<TblGameMove>();
		}
	}
	
	public System.Data.Linq.Table<TblMove> TblMoves
	{
		get
		{
			return this.GetTable<TblMove>();
		}
	}
	
	public System.Data.Linq.Table<TblPlayer> TblPlayers
	{
		get
		{
			return this.GetTable<TblPlayer>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblFamily")]
public partial class TblFamily : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private EntitySet<TblFamilyPlayer> _TblFamilyPlayers;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public TblFamily()
	{
		this._TblFamilyPlayers = new EntitySet<TblFamilyPlayer>(new Action<TblFamilyPlayer>(this.attach_TblFamilyPlayers), new Action<TblFamilyPlayer>(this.detach_TblFamilyPlayers));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblFamily_TblFamilyPlayer", Storage="_TblFamilyPlayers", ThisKey="Id", OtherKey="idFamily")]
	public EntitySet<TblFamilyPlayer> TblFamilyPlayers
	{
		get
		{
			return this._TblFamilyPlayers;
		}
		set
		{
			this._TblFamilyPlayers.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TblFamilyPlayers(TblFamilyPlayer entity)
	{
		this.SendPropertyChanging();
		entity.TblFamily = this;
	}
	
	private void detach_TblFamilyPlayers(TblFamilyPlayer entity)
	{
		this.SendPropertyChanging();
		entity.TblFamily = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblPlayerGame")]
public partial class TblPlayerGame : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _idPlayer;
	
	private int _idGame;
	
	private EntityRef<TblGame> _TblGame;
	
	private EntityRef<TblPlayer> _TblPlayer;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnidPlayerChanging(int value);
    partial void OnidPlayerChanged();
    partial void OnidGameChanging(int value);
    partial void OnidGameChanged();
    #endregion
	
	public TblPlayerGame()
	{
		this._TblGame = default(EntityRef<TblGame>);
		this._TblPlayer = default(EntityRef<TblPlayer>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPlayer", DbType="Int NOT NULL")]
	public int idPlayer
	{
		get
		{
			return this._idPlayer;
		}
		set
		{
			if ((this._idPlayer != value))
			{
				if (this._TblPlayer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidPlayerChanging(value);
				this.SendPropertyChanging();
				this._idPlayer = value;
				this.SendPropertyChanged("idPlayer");
				this.OnidPlayerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGame", DbType="Int NOT NULL")]
	public int idGame
	{
		get
		{
			return this._idGame;
		}
		set
		{
			if ((this._idGame != value))
			{
				if (this._TblGame.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidGameChanging(value);
				this.SendPropertyChanging();
				this._idGame = value;
				this.SendPropertyChanged("idGame");
				this.OnidGameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblGame_TblPlayerGame", Storage="_TblGame", ThisKey="idGame", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public TblGame TblGame
	{
		get
		{
			return this._TblGame.Entity;
		}
		set
		{
			TblGame previousValue = this._TblGame.Entity;
			if (((previousValue != value) 
						|| (this._TblGame.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TblGame.Entity = null;
					previousValue.TblPlayerGames.Remove(this);
				}
				this._TblGame.Entity = value;
				if ((value != null))
				{
					value.TblPlayerGames.Add(this);
					this._idGame = value.Id;
				}
				else
				{
					this._idGame = default(int);
				}
				this.SendPropertyChanged("TblGame");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblPlayer_TblPlayerGame", Storage="_TblPlayer", ThisKey="idPlayer", OtherKey="Id", IsForeignKey=true)]
	public TblPlayer TblPlayer
	{
		get
		{
			return this._TblPlayer.Entity;
		}
		set
		{
			TblPlayer previousValue = this._TblPlayer.Entity;
			if (((previousValue != value) 
						|| (this._TblPlayer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TblPlayer.Entity = null;
					previousValue.TblPlayerGames.Remove(this);
				}
				this._TblPlayer.Entity = value;
				if ((value != null))
				{
					value.TblPlayerGames.Add(this);
					this._idPlayer = value.Id;
				}
				else
				{
					this._idPlayer = default(int);
				}
				this.SendPropertyChanged("TblPlayer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblFamilyPlayer")]
public partial class TblFamilyPlayer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _idFamily;
	
	private int _idPlayer;
	
	private EntityRef<TblFamily> _TblFamily;
	
	private EntityRef<TblPlayer> _TblPlayer;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnidFamilyChanging(int value);
    partial void OnidFamilyChanged();
    partial void OnidPlayerChanging(int value);
    partial void OnidPlayerChanged();
    #endregion
	
	public TblFamilyPlayer()
	{
		this._TblFamily = default(EntityRef<TblFamily>);
		this._TblPlayer = default(EntityRef<TblPlayer>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFamily", DbType="Int NOT NULL")]
	public int idFamily
	{
		get
		{
			return this._idFamily;
		}
		set
		{
			if ((this._idFamily != value))
			{
				if (this._TblFamily.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidFamilyChanging(value);
				this.SendPropertyChanging();
				this._idFamily = value;
				this.SendPropertyChanged("idFamily");
				this.OnidFamilyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPlayer", DbType="Int NOT NULL")]
	public int idPlayer
	{
		get
		{
			return this._idPlayer;
		}
		set
		{
			if ((this._idPlayer != value))
			{
				if (this._TblPlayer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidPlayerChanging(value);
				this.SendPropertyChanging();
				this._idPlayer = value;
				this.SendPropertyChanged("idPlayer");
				this.OnidPlayerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblFamily_TblFamilyPlayer", Storage="_TblFamily", ThisKey="idFamily", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public TblFamily TblFamily
	{
		get
		{
			return this._TblFamily.Entity;
		}
		set
		{
			TblFamily previousValue = this._TblFamily.Entity;
			if (((previousValue != value) 
						|| (this._TblFamily.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TblFamily.Entity = null;
					previousValue.TblFamilyPlayers.Remove(this);
				}
				this._TblFamily.Entity = value;
				if ((value != null))
				{
					value.TblFamilyPlayers.Add(this);
					this._idFamily = value.Id;
				}
				else
				{
					this._idFamily = default(int);
				}
				this.SendPropertyChanged("TblFamily");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblPlayer_TblFamilyPlayer", Storage="_TblPlayer", ThisKey="idPlayer", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public TblPlayer TblPlayer
	{
		get
		{
			return this._TblPlayer.Entity;
		}
		set
		{
			TblPlayer previousValue = this._TblPlayer.Entity;
			if (((previousValue != value) 
						|| (this._TblPlayer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TblPlayer.Entity = null;
					previousValue.TblFamilyPlayers.Remove(this);
				}
				this._TblPlayer.Entity = value;
				if ((value != null))
				{
					value.TblFamilyPlayers.Add(this);
					this._idPlayer = value.Id;
				}
				else
				{
					this._idPlayer = default(int);
				}
				this.SendPropertyChanged("TblPlayer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblGame")]
public partial class TblGame : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.DateTime _CreatedDate;
	
	private string _Status;
	
	private int _WinnerPlayerNum;
	
	private EntitySet<TblPlayerGame> _TblPlayerGames;
	
	private EntitySet<TblGameMove> _TblGameMoves;
	
	private EntitySet<TblMove> _TblMoves;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnWinnerPlayerNumChanging(int value);
    partial void OnWinnerPlayerNumChanged();
    #endregion
	
	public TblGame()
	{
		this._TblPlayerGames = new EntitySet<TblPlayerGame>(new Action<TblPlayerGame>(this.attach_TblPlayerGames), new Action<TblPlayerGame>(this.detach_TblPlayerGames));
		this._TblGameMoves = new EntitySet<TblGameMove>(new Action<TblGameMove>(this.attach_TblGameMoves), new Action<TblGameMove>(this.detach_TblGameMoves));
		this._TblMoves = new EntitySet<TblMove>(new Action<TblMove>(this.attach_TblMoves), new Action<TblMove>(this.detach_TblMoves));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="Date NOT NULL")]
	public System.DateTime CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinnerPlayerNum", DbType="Int NOT NULL")]
	public int WinnerPlayerNum
	{
		get
		{
			return this._WinnerPlayerNum;
		}
		set
		{
			if ((this._WinnerPlayerNum != value))
			{
				this.OnWinnerPlayerNumChanging(value);
				this.SendPropertyChanging();
				this._WinnerPlayerNum = value;
				this.SendPropertyChanged("WinnerPlayerNum");
				this.OnWinnerPlayerNumChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblGame_TblPlayerGame", Storage="_TblPlayerGames", ThisKey="Id", OtherKey="idGame")]
	public EntitySet<TblPlayerGame> TblPlayerGames
	{
		get
		{
			return this._TblPlayerGames;
		}
		set
		{
			this._TblPlayerGames.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblGame_TblGameMove", Storage="_TblGameMoves", ThisKey="Id", OtherKey="idGame")]
	public EntitySet<TblGameMove> TblGameMoves
	{
		get
		{
			return this._TblGameMoves;
		}
		set
		{
			this._TblGameMoves.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblGame_TblMove", Storage="_TblMoves", ThisKey="Id", OtherKey="idGame")]
	public EntitySet<TblMove> TblMoves
	{
		get
		{
			return this._TblMoves;
		}
		set
		{
			this._TblMoves.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TblPlayerGames(TblPlayerGame entity)
	{
		this.SendPropertyChanging();
		entity.TblGame = this;
	}
	
	private void detach_TblPlayerGames(TblPlayerGame entity)
	{
		this.SendPropertyChanging();
		entity.TblGame = null;
	}
	
	private void attach_TblGameMoves(TblGameMove entity)
	{
		this.SendPropertyChanging();
		entity.TblGame = this;
	}
	
	private void detach_TblGameMoves(TblGameMove entity)
	{
		this.SendPropertyChanging();
		entity.TblGame = null;
	}
	
	private void attach_TblMoves(TblMove entity)
	{
		this.SendPropertyChanging();
		entity.TblGame = this;
	}
	
	private void detach_TblMoves(TblMove entity)
	{
		this.SendPropertyChanging();
		entity.TblGame = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblGameMove")]
public partial class TblGameMove : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _idMove;
	
	private int _idGame;
	
	private EntityRef<TblGame> _TblGame;
	
	private EntityRef<TblMove> _TblMove;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnidMoveChanging(int value);
    partial void OnidMoveChanged();
    partial void OnidGameChanging(int value);
    partial void OnidGameChanged();
    #endregion
	
	public TblGameMove()
	{
		this._TblGame = default(EntityRef<TblGame>);
		this._TblMove = default(EntityRef<TblMove>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMove", DbType="Int NOT NULL")]
	public int idMove
	{
		get
		{
			return this._idMove;
		}
		set
		{
			if ((this._idMove != value))
			{
				if (this._TblMove.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidMoveChanging(value);
				this.SendPropertyChanging();
				this._idMove = value;
				this.SendPropertyChanged("idMove");
				this.OnidMoveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGame", DbType="Int NOT NULL")]
	public int idGame
	{
		get
		{
			return this._idGame;
		}
		set
		{
			if ((this._idGame != value))
			{
				if (this._TblGame.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidGameChanging(value);
				this.SendPropertyChanging();
				this._idGame = value;
				this.SendPropertyChanged("idGame");
				this.OnidGameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblGame_TblGameMove", Storage="_TblGame", ThisKey="idGame", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public TblGame TblGame
	{
		get
		{
			return this._TblGame.Entity;
		}
		set
		{
			TblGame previousValue = this._TblGame.Entity;
			if (((previousValue != value) 
						|| (this._TblGame.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TblGame.Entity = null;
					previousValue.TblGameMoves.Remove(this);
				}
				this._TblGame.Entity = value;
				if ((value != null))
				{
					value.TblGameMoves.Add(this);
					this._idGame = value.Id;
				}
				else
				{
					this._idGame = default(int);
				}
				this.SendPropertyChanged("TblGame");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblMove_TblGameMove", Storage="_TblMove", ThisKey="idMove", OtherKey="Id", IsForeignKey=true)]
	public TblMove TblMove
	{
		get
		{
			return this._TblMove.Entity;
		}
		set
		{
			TblMove previousValue = this._TblMove.Entity;
			if (((previousValue != value) 
						|| (this._TblMove.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TblMove.Entity = null;
					previousValue.TblGameMoves.Remove(this);
				}
				this._TblMove.Entity = value;
				if ((value != null))
				{
					value.TblGameMoves.Add(this);
					this._idMove = value.Id;
				}
				else
				{
					this._idMove = default(int);
				}
				this.SendPropertyChanged("TblMove");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblMove")]
public partial class TblMove : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.DateTime _CreatedDate;
	
	private int _idPlayer;
	
	private int _idGame;
	
	private int _From_X;
	
	private int _From_Y;
	
	private int _To_X;
	
	private int _To_Y;
	
	private bool _RivalEat;
	
	private EntitySet<TblGameMove> _TblGameMoves;
	
	private EntityRef<TblGame> _TblGame;
	
	private EntityRef<TblPlayer> _TblPlayer;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnidPlayerChanging(int value);
    partial void OnidPlayerChanged();
    partial void OnidGameChanging(int value);
    partial void OnidGameChanged();
    partial void OnFrom_XChanging(int value);
    partial void OnFrom_XChanged();
    partial void OnFrom_YChanging(int value);
    partial void OnFrom_YChanged();
    partial void OnTo_XChanging(int value);
    partial void OnTo_XChanged();
    partial void OnTo_YChanging(int value);
    partial void OnTo_YChanged();
    partial void OnRivalEatChanging(bool value);
    partial void OnRivalEatChanged();
    #endregion
	
	public TblMove()
	{
		this._TblGameMoves = new EntitySet<TblGameMove>(new Action<TblGameMove>(this.attach_TblGameMoves), new Action<TblGameMove>(this.detach_TblGameMoves));
		this._TblGame = default(EntityRef<TblGame>);
		this._TblPlayer = default(EntityRef<TblPlayer>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="Date NOT NULL")]
	public System.DateTime CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPlayer", DbType="Int NOT NULL")]
	public int idPlayer
	{
		get
		{
			return this._idPlayer;
		}
		set
		{
			if ((this._idPlayer != value))
			{
				if (this._TblPlayer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidPlayerChanging(value);
				this.SendPropertyChanging();
				this._idPlayer = value;
				this.SendPropertyChanged("idPlayer");
				this.OnidPlayerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGame", DbType="Int NOT NULL")]
	public int idGame
	{
		get
		{
			return this._idGame;
		}
		set
		{
			if ((this._idGame != value))
			{
				if (this._TblGame.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidGameChanging(value);
				this.SendPropertyChanging();
				this._idGame = value;
				this.SendPropertyChanged("idGame");
				this.OnidGameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_From_X", DbType="Int NOT NULL")]
	public int From_X
	{
		get
		{
			return this._From_X;
		}
		set
		{
			if ((this._From_X != value))
			{
				this.OnFrom_XChanging(value);
				this.SendPropertyChanging();
				this._From_X = value;
				this.SendPropertyChanged("From_X");
				this.OnFrom_XChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_From_Y", DbType="Int NOT NULL")]
	public int From_Y
	{
		get
		{
			return this._From_Y;
		}
		set
		{
			if ((this._From_Y != value))
			{
				this.OnFrom_YChanging(value);
				this.SendPropertyChanging();
				this._From_Y = value;
				this.SendPropertyChanged("From_Y");
				this.OnFrom_YChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_To_X", DbType="Int NOT NULL")]
	public int To_X
	{
		get
		{
			return this._To_X;
		}
		set
		{
			if ((this._To_X != value))
			{
				this.OnTo_XChanging(value);
				this.SendPropertyChanging();
				this._To_X = value;
				this.SendPropertyChanged("To_X");
				this.OnTo_XChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_To_Y", DbType="Int NOT NULL")]
	public int To_Y
	{
		get
		{
			return this._To_Y;
		}
		set
		{
			if ((this._To_Y != value))
			{
				this.OnTo_YChanging(value);
				this.SendPropertyChanging();
				this._To_Y = value;
				this.SendPropertyChanged("To_Y");
				this.OnTo_YChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RivalEat", DbType="Bit NOT NULL")]
	public bool RivalEat
	{
		get
		{
			return this._RivalEat;
		}
		set
		{
			if ((this._RivalEat != value))
			{
				this.OnRivalEatChanging(value);
				this.SendPropertyChanging();
				this._RivalEat = value;
				this.SendPropertyChanged("RivalEat");
				this.OnRivalEatChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblMove_TblGameMove", Storage="_TblGameMoves", ThisKey="Id", OtherKey="idMove")]
	public EntitySet<TblGameMove> TblGameMoves
	{
		get
		{
			return this._TblGameMoves;
		}
		set
		{
			this._TblGameMoves.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblGame_TblMove", Storage="_TblGame", ThisKey="idGame", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public TblGame TblGame
	{
		get
		{
			return this._TblGame.Entity;
		}
		set
		{
			TblGame previousValue = this._TblGame.Entity;
			if (((previousValue != value) 
						|| (this._TblGame.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TblGame.Entity = null;
					previousValue.TblMoves.Remove(this);
				}
				this._TblGame.Entity = value;
				if ((value != null))
				{
					value.TblMoves.Add(this);
					this._idGame = value.Id;
				}
				else
				{
					this._idGame = default(int);
				}
				this.SendPropertyChanged("TblGame");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblPlayer_TblMove", Storage="_TblPlayer", ThisKey="idPlayer", OtherKey="Id", IsForeignKey=true)]
	public TblPlayer TblPlayer
	{
		get
		{
			return this._TblPlayer.Entity;
		}
		set
		{
			TblPlayer previousValue = this._TblPlayer.Entity;
			if (((previousValue != value) 
						|| (this._TblPlayer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TblPlayer.Entity = null;
					previousValue.TblMoves.Remove(this);
				}
				this._TblPlayer.Entity = value;
				if ((value != null))
				{
					value.TblMoves.Add(this);
					this._idPlayer = value.Id;
				}
				else
				{
					this._idPlayer = default(int);
				}
				this.SendPropertyChanged("TblPlayer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TblGameMoves(TblGameMove entity)
	{
		this.SendPropertyChanging();
		entity.TblMove = this;
	}
	
	private void detach_TblGameMoves(TblGameMove entity)
	{
		this.SendPropertyChanging();
		entity.TblMove = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblPlayer")]
public partial class TblPlayer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Password;
	
	private string _Name;
	
	private EntitySet<TblPlayerGame> _TblPlayerGames;
	
	private EntitySet<TblFamilyPlayer> _TblFamilyPlayers;
	
	private EntitySet<TblMove> _TblMoves;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public TblPlayer()
	{
		this._TblPlayerGames = new EntitySet<TblPlayerGame>(new Action<TblPlayerGame>(this.attach_TblPlayerGames), new Action<TblPlayerGame>(this.detach_TblPlayerGames));
		this._TblFamilyPlayers = new EntitySet<TblFamilyPlayer>(new Action<TblFamilyPlayer>(this.attach_TblFamilyPlayers), new Action<TblFamilyPlayer>(this.detach_TblFamilyPlayers));
		this._TblMoves = new EntitySet<TblMove>(new Action<TblMove>(this.attach_TblMoves), new Action<TblMove>(this.detach_TblMoves));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblPlayer_TblPlayerGame", Storage="_TblPlayerGames", ThisKey="Id", OtherKey="idPlayer")]
	public EntitySet<TblPlayerGame> TblPlayerGames
	{
		get
		{
			return this._TblPlayerGames;
		}
		set
		{
			this._TblPlayerGames.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblPlayer_TblFamilyPlayer", Storage="_TblFamilyPlayers", ThisKey="Id", OtherKey="idPlayer")]
	public EntitySet<TblFamilyPlayer> TblFamilyPlayers
	{
		get
		{
			return this._TblFamilyPlayers;
		}
		set
		{
			this._TblFamilyPlayers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblPlayer_TblMove", Storage="_TblMoves", ThisKey="Id", OtherKey="idPlayer")]
	public EntitySet<TblMove> TblMoves
	{
		get
		{
			return this._TblMoves;
		}
		set
		{
			this._TblMoves.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TblPlayerGames(TblPlayerGame entity)
	{
		this.SendPropertyChanging();
		entity.TblPlayer = this;
	}
	
	private void detach_TblPlayerGames(TblPlayerGame entity)
	{
		this.SendPropertyChanging();
		entity.TblPlayer = null;
	}
	
	private void attach_TblFamilyPlayers(TblFamilyPlayer entity)
	{
		this.SendPropertyChanging();
		entity.TblPlayer = this;
	}
	
	private void detach_TblFamilyPlayers(TblFamilyPlayer entity)
	{
		this.SendPropertyChanging();
		entity.TblPlayer = null;
	}
	
	private void attach_TblMoves(TblMove entity)
	{
		this.SendPropertyChanging();
		entity.TblPlayer = this;
	}
	
	private void detach_TblMoves(TblMove entity)
	{
		this.SendPropertyChanging();
		entity.TblPlayer = null;
	}
}
#pragma warning restore 1591
